function po3 = tri3d(po1, po2, p1, p2)
% po1, po2 - 2D correspondences
% p1, p2 - camera matrix

u1 = po1(1);
v1 = po1(2);
u2 = po2(1);
v2 = po2(2);

A = [u1 * p1(3, 1) - p1(1, 1), u1 * p1(3, 2) - p1(1, 2), u1 * p1(3, 3) - p1(1, 3), u1 * p1(3, 4) - p1(1, 4); ...
     v1 * p1(3, 1) - p1(2, 1), v1 * p1(3, 2) - p1(2, 2), v1 * p1(3, 3) - p1(2, 3), v1 * p1(3, 4) - p1(2, 4); ...
     u2 * p2(3, 1) - p2(1, 1), u2 * p2(3, 2) - p2(1, 2), u2 * p2(3, 3) - p2(1, 3), u2 * p2(3, 4) - p2(1, 4); ...
     v2 * p2(3, 1) - p2(2, 1), v2 * p2(3, 2) - p2(2, 2), v2 * p2(3, 3) - p2(2, 3), v2 * p2(3, 4) - p2(2, 4)];
 
[~, ~, V] = svd(A);

po = V(:, 4);
po3 = po(1: 3) / po(4);

end